module pcre2::posix;

const CInt REG_ICASE    = 0x0001;  /* Maps to PCRE2_CASELESS */
const CInt REG_NEWLINE  = 0x0002;  /* Maps to PCRE2_MULTILINE */
const CInt REG_NOTBOL   = 0x0004;  /* Maps to PCRE2_NOTBOL */
const CInt REG_NOTEOL   = 0x0008;  /* Maps to PCRE2_NOTEOL */
const CInt REG_DOTALL   = 0x0010;  /* NOT defined by POSIX; maps to PCRE2_DOTALL */
const CInt REG_NOSUB    = 0x0020;  /* Do not report what was matched */
const CInt REG_UTF      = 0x0040;  /* NOT defined by POSIX; maps to PCRE2_UTF */
const CInt REG_STARTEND = 0x0080;  /* BSD feature: pass subject string by so,eo */
const CInt REG_NOTEMPTY = 0x0100;  /* NOT defined by POSIX; maps to PCRE2_NOTEMPTY */
const CInt REG_UNGREEDY = 0x0200;  /* NOT defined by POSIX; maps to PCRE2_UNGREEDY */
const CInt REG_UCP      = 0x0400;  /* NOT defined by POSIX; maps to PCRE2_UCP */
const CInt REG_PEND     = 0x0800;  /* GNU feature: pass end pattern by re_endp */
const CInt REG_NOSPEC   = 0x1000;  /* Maps to PCRE2_LITERAL */

const CInt REG_ASSERT   =  1;  /* internal error ? */
const CInt REG_BADBR    =  2;  /* invalid repeat counts in {} */
const CInt REG_BADPAT   =  3;  /* pattern error */
const CInt REG_BADRPT   =  4;  /* ? * + invalid */
const CInt REG_EBRACE   =  5;  /* unbalanced {} */
const CInt REG_EBRACK   =  6;  /* unbalanced [] */
const CInt REG_ECOLLATE =  7;  /* collation error - not relevant */
const CInt REG_ECTYPE   =  8;  /* bad class */
const CInt REG_EESCAPE  =  9;  /* bad escape sequence */
const CInt REG_EMPTY    = 10;  /* empty expression */
const CInt REG_EPAREN   = 11;  /* unbalanced () */
const CInt REG_ERANGE   = 12;  /* bad range inside [] */
const CInt REG_ESIZE    = 13;  /* expression too big */
const CInt REG_ESPACE   = 14;  /* failed to get memory */
const CInt REG_ESUBREG  = 15;  /* bad back reference */
const CInt REG_INVARG   = 16;  /* bad argument */
const CInt REG_NOMATCH  = 17;  /* match failed */

struct Regex_t {
  void *re_pcre2_code;
  void *re_match_data;
  char *re_endp;
  usz re_nsub;
  usz re_erroffset;
  CInt re_cflags;
}

def Regoff_t = CInt;

struct Regmatch_t {
  Regoff_t rm_so;
  Regoff_t rm_eo;
}

extern fn CInt regcomp(Regex_t *preg, ZString pattern, CInt flags) @extern("pcre2_regcomp");
extern fn CInt regexec(Regex_t *preg, ZString string, usz nmatch, Regmatch_t *pmatch, CInt eflags) @extern("pcre2_regexec");
extern fn usz regerror(CInt errcode, Regex_t *preg, char *errbuf, usz errbuf_size) @extern("pcre2_regerror");
extern fn void regfree(Regex_t *preg) @extern("pcre2_regfree");
